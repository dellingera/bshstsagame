<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slime_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(true);
display_set_gui_maximise()

//option variables
grav = 0.2; //the strength of the gravity
jumpspeed = 7; //initial speed after jumping
movespeed = 4; //speed of horizontal movement
vspMax = 10; //max possible speed
characterWidth = 40; //how wide is the sprite
rampSlopeMax = 5; //what is the slope, in pixels, a ramp can be, max
rampClimbSpeed = 3; //how far to shove your character into a ramp

//state variables
hsp = 0; //horizontal speed
vsp = 0; //vertical speed
facingRightWay = 1; //facing last frames direction
var startScale = image_xscale; //flip it over without warping it

//make global vars
facing = 1;
global.seconds = 90;
global.seconds = global.seconds * 60; //because it's actually just ticked down every frame

//continue to increment seconds?
global.isDone = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//glitch protection - if they are in a block, pop them out
while(place_meeting(x,y,PLATFORM)) {
    y = y-1;
}

vx = view_xview[0];
vy = view_yview[0];
w = display_get_width();
h = display_get_height();
hs = w/3;
vs = h/3;

view_yview[0] = h;
view_xview[0] = w;

show_debug_message(string(vy));
show_debug_message(string(y));

if (x &lt; vx + hs) {
    vx = x-hs;
}
if (x &gt; vx + w - hs) {
    vx = x - w + hs;
}
if (y &lt; vy + vs) {
    vy = y-vs;
}
if (y &gt; vy + h - vs) {
    vy = y - h + vs;
}

view_xview[0] = vx;
view_yview[0] = vy;




//now that we have dealt with camera position, we need to determine which keys are being pressed
//these values are 1 for on, and 0 for off
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left); //except this one, this one is negative - notice the '-' symbol
key_up = keyboard_check_pressed(vk_up);
spacebar_pressed = keyboard_check(vk_space);
key_escape = keyboard_check(vk_escape);

if (key_escape == 1) { room_goto(rm_menu); instance_destroy(); }//escape key ends game


move = key_left + key_right;
hsp = move * movespeed; 

preservedHsp = hsp; //we screw with hsp when dealing with platforms, but we need it back for ramps

if (key_right) facing = 1;
if (key_left == -1) facing = -1;

//now we modify the vertical speed according to gravity
if (vsp &lt; vspMax) {
    vsp += grav; //add the gravity speed in the downward direction 
}

//deal with enemys
if( place_meeting(x, y+vsp, ENEMY) || place_meeting(x+hsp,y,ENEMY) ) {
    x = xstart
    y = ystart
    while(place_meeting(x, y, PLATFORM)){
        y = y - 1;
    }
}
if( place_meeting(x, y+vsp, obj_lava) || place_meeting(x+hsp,y,obj_lava) ) {
    x = 128
    y = 7520
    while(place_meeting(x, y, PLATFORM)){
        y = y - 1;
    }
}
if( place_meeting(x, y+vsp, obj_lavatut) || place_meeting(x+hsp,y,obj_lavatut) ) {
    x = 1312
    y = 768
    while(place_meeting(x, y, PLATFORM)){
        y = y - 1;
    }
}
if( place_meeting(x, y+vsp, obj_cactustut) || place_meeting(x+hsp,y,obj_cactustut) ) {
    x = 1312
    y = 768
    while(place_meeting(x, y, PLATFORM)){
        y = y - 1;
    }
}
if( place_meeting(x, y+vsp, obj_warptut) || place_meeting(x+hsp,y,obj_warptut) ) {
    room_goto(rm_menu);
    instance_destroy();
    }


//handle vertical collisions
if (place_meeting(x, y+vsp, PLATFORM)) { //if they will hit the wall next step
    while(!place_meeting(x,y+sign(vsp),PLATFORM)) { //while they are not touching it
        y += sign(vsp); //move them one towards it
    }
    vsp = 0; //now get rid of your speed, you just hit a wall
}


//handle jumps
if (place_meeting(x,y+1,PLATFORM)) { //if they are standing on something
    vsp = key_up * -jumpspeed //set the vsp to the jump speed, unless the up key is not pressed, in which case it is 0
}


//we have normal vertical postioning handled, let's finalize it
y += vsp;

//skip is going to be needed so the camera doesn't get jumpy when they move back and forth
skip = false;

//now we make the character face the right way when they move
if (facing != image_xscale){ //if they are not facing the same way the image is scaled
    image_xscale = facing; //make is so
    width = characterWidth/2; //except this is flipping over the left axis, I think. We need to slide it back. 
    width = -facing * width;
    x += width;
    //now we've moved enough. Any more will look weird. Lock out movement this turn. 
    skip = true;
}

//now we set the sprites based on what the player is doing
if (place_meeting (x,y+1,PLATFORM)){ //if the player is one the ground
    if (move != 0) { //if we are moving
        sprite_index = spr_slime_run; //change the sprite to the running one
    } else {
         sprite_index = spr_slime_idle; //not moving sprite
    }
} else { //we are in the air
    if (vsp &lt; 0) { //we are moving up
        sprite_index = spr_slime_jump; 
    } else { //we are moving down
        sprite_index = spr_slime_fall; 
    }
}

//now the vertical speed is final, and the jerky flipping animation is dealt with. Time for horizontal movement. 
if(!skip) {
    //If they are about to run into a wall, move them right up close to that wall
    if (place_meeting(x+hsp,y,PLATFORM)) {  //if the character will touch something in the future
        while(!place_meeting(x+sign(hsp),y,PLATFORM)) { //while they are not touching the wall
            x += sign(hsp); //move them towards it
        }
        hsp = 0;  //now get rid of any horizontal speed
    }
    
    x += hsp;  //the speed has been dealt with if it needs changing, now add it to the x position
}

//now, we have done all of our mundane moving. Remember that RAMP is a child of PLATFORM, so it is solid. 
//We want ramps of arbitrary slope. But not really, because that causes problems with things moving straight up.
//So we want arbitrary slope within an upper bound. So:
//we check if there is a slope collision on their feet
//we check they are actually standing on something
//we check that there isn't one at their head
//if all pass, we move into the slope, then up until we are out of it
if(place_meeting(x + preservedHsp, y, PLATFORM) and place_meeting(x,y+1,PLATFORM) and !place_meeting(x+preservedHsp,y-rampSlopeMax,PLATFORM)) {
    maxMove = 5;
    move = 0;
    //touch the wall
    while(!place_meeting(x+sign(preservedHsp),y,RAMP) &amp;&amp; move &lt; maxMove) { //while they are not touching the ramp
        x += facing;
        move++;
    }
    
    //now stuff them into the wall 
    x += facing * rampClimbSpeed;
    
    //now move them up until they are out of the ramp
    while(place_meeting(x,y,RAMP)) { //while they are in the ramp
        y -= 1; //move them up 1
    }
}

//now we update the timer
if(!global.isDone) {
    global.seconds = global.seconds-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dispSeconds = floor(global.seconds/60);
draw_text(view_xview[0],view_yview[0]+35,string(dispSeconds));

draw_sprite_ext(sprite_index, -1, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

if(global.seconds &lt; 0) {
    room_goto(rm_dead);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
