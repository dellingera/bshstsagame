<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slime_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
cooldownInitial = 30;
fireballCooldown = cooldownInitial;
facingRightWay = 1;

var startScale = image_xscale;

//make global variables
globalvar facing; 
facing = 1; //right
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetX=x-325;
targetY=y-360;
view_xview[0]=(view_xview[0]*7+targetX)/8;//the xview is weighed *7 here. xview*7+targetX*1 --&gt; 8
view_yview[0]=(view_yview[0]*7+targetY)/8;

//---------------------------------------------------------Get Input Variables
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
spacebar_pressed = keyboard_check(vk_space);

skip = false;

//---------------------------------------------------------Parse Input Variables
move = key_left + key_right;
hsp = move * movespeed; 

if (key_right) facing = 1;
if (key_left == -1) facing = -1;

//----------------------------------------------------------Deal With Fireball
if(spacebar_pressed &amp;&amp; fireballCooldown &lt; 0) {
    instance_create(x,y,fireball);
    fireballCooldown = cooldownInitial;
}

//----------------------------------------------------------Deal With Vertical Speed
//basic gravity
if (vsp &lt; 10) { //if the vsp is less than the maximum vertical movement
    vsp += grav; //increase the speed of falling .2, or decrease the speed of rising .2. Same thing. 
}
//I have no idea what this does
if (place_meeting(x,y+1,obj_stone)) { 
    vsp = key_jump * -jumpspeed      
}

//vertical collisions
if (place_meeting(x, y+vsp, obj_stone)) { //if they will hit the wall next step
    while(!place_meeting(x,y+sign(vsp),obj_stone)) { //while they are not touching it
        y += sign(vsp); //move them one towards it
    }
    vsp = 0; //now get rid of your speed, you just hit a wall
}

//---------------------------------------------------------Ramps
//no idea
show_debug_message(string(key_jump));
if (place_meeting(x,y+1,obj_ramp)) { 
    vsp = key_jump * -jumpspeed      
}

//vertical collisions handling
if (place_meeting(x, y+vsp, obj_ramp)) { //if they will hit the wall next step
    while(!place_meeting(x,y+sign(vsp),obj_ramp)) { //while they are not touching it
        y += sign(vsp); //move them one towards it
    }
    vsp = 0; //now get rid of your speed, you just hit a wall
}

y += vsp; //move the character according to the vsp

//--------------------------------------------------------------------Animate
if (facing != image_xscale){
    image_xscale = facing;
    width = 20;
    show_debug_message(string(width));
    width = -facing * width;
    show_debug_message(string(width));
    show_debug_message("---");
    x += width;
    skip = true;
}

if (place_meeting (x,y+1,obj_stone))
{
    if (move != 0) sprite_index = spr_slime_run; else sprite_index = spr_slime_idle; //if move doesn't equal 0 then player runs else it is idle
}
else //refering to the previous statement
{
    if (vsp &lt; 0) sprite_index = spr_slime_jump; else sprite_index = spr_slime_fall; //if player height is less than zero player jumps else it falls
}

//-----------------------------------------------------------Deal With Horizontal Speed
if(!skip) {
    //If they are about to run into a wall, move them right up close to that wall
    if (place_meeting(x+hsp,y,obj_stone)) {  //if the character will touch something in the future
        while(!place_meeting(x+sign(hsp),y,obj_stone)) { //while they are not touching the wall
            x += sign(hsp); //move them towards it
        }
        hsp = 0;  //now get rid of any horizontal speed
    }
    //If they are about to run into a ramp, move them right up close to that wall
    if (place_meeting(x+hsp,y,obj_ramp)) {  //if the character will touch something in the future
        while(!place_meeting(x+sign(hsp),y,obj_ramp)) { //while they are not touching the wall
            x += sign(hsp); //move them towards it
        }
        y = y-3;
        x = x + 3*facing;
        hsp = 0;  //now get rid of any horizontal speed
    }
    x += hsp;  //the speed has been dealt with if it needs changing, now add it to the x position
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
